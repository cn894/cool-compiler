
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 19 19:12:16 AST 2014
//----------------------------------------------------

package edu.icom4029.cool.parser;

import java_cup.runtime.*;
import edu.icom4029.cool.core.*;
import edu.icom4029.cool.lexer.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 19 19:12:16 AST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\004\000\002\005\002\000\002\006\006\000" +
    "\002\006\010\000\002\010\006\000\002\011\002\000\002" +
    "\011\003\000\002\012\003\000\002\012\005\000\002\013" +
    "\005\000\002\014\003\000\002\014\004\000\002\015\010" +
    "\000\002\020\002\000\002\020\003\000\002\021\003\000" +
    "\002\021\005\000\002\022\004\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\007\005\000\002\007" +
    "\007\000\002\007\004\000\002\007\010\000\002\007\006" +
    "\000\002\007\011\000\002\007\007\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\007\007\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\004\000\002\016\010\000\002\016" +
    "\010\000\002\017\002\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\004\007\001\002\000\004\002\001\001" +
    "\002\000\004\002\174\001\002\000\006\002\uffff\004\007" +
    "\001\002\000\004\051\010\001\002\000\006\011\012\031" +
    "\011\001\002\000\006\032\ufffa\050\017\001\002\000\004" +
    "\051\013\001\002\000\004\031\014\001\002\000\006\032" +
    "\ufffa\050\017\001\002\000\006\032\ufffa\050\017\001\002" +
    "\000\004\032\165\001\002\000\004\033\020\001\002\000" +
    "\004\051\021\001\002\000\006\025\023\034\022\001\002" +
    "\000\006\032\ufff9\050\ufff9\001\002\000\036\007\032\012" +
    "\033\013\041\017\025\020\035\022\027\024\037\027\042" +
    "\031\024\047\040\050\034\052\026\053\030\054\031\001" +
    "\002\000\040\007\032\012\033\013\041\017\025\020\035" +
    "\022\027\024\037\027\042\031\024\032\uffee\047\040\050" +
    "\034\052\026\053\030\054\031\001\002\000\036\007\032" +
    "\012\033\013\041\017\025\020\035\022\027\024\037\027" +
    "\042\031\024\047\040\050\034\052\026\053\030\054\031" +
    "\001\002\000\052\005\uffd0\006\uffd0\010\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\023\uffd0\030\uffd0\032\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\001\002\000\004\051\152\001\002" +
    "\000\052\005\uffcf\006\uffcf\010\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\023\uffcf\030\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\001\002\000\052\005\uffce\006\uffce\010\uffce" +
    "\014\uffce\015\uffce\016\uffce\023\uffce\030\uffce\032\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\001\002\000\036\007" +
    "\032\012\033\013\041\017\025\020\035\022\027\024\037" +
    "\027\042\031\024\047\040\050\034\052\026\053\030\054" +
    "\031\001\002\000\036\007\032\012\033\013\041\017\025" +
    "\020\035\022\027\024\037\027\042\031\024\047\040\050" +
    "\034\052\026\053\030\054\031\001\002\000\060\005\uffd1" +
    "\006\uffd1\010\uffd1\014\uffd1\015\uffd1\016\uffd1\023\uffd1\025" +
    "\136\027\062\030\uffd1\032\uffd1\033\134\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\036\007\032\012\033" +
    "\013\041\017\025\020\035\022\027\024\037\027\042\031" +
    "\024\047\040\050\034\052\026\053\030\054\031\001\002" +
    "\000\026\034\117\035\046\036\044\037\045\040\052\041" +
    "\047\042\055\043\050\045\051\046\054\001\002\000\036" +
    "\007\032\012\033\013\041\017\025\020\035\022\027\024" +
    "\037\027\042\031\024\047\040\050\034\052\026\053\030" +
    "\054\031\001\002\000\036\007\032\012\033\013\041\017" +
    "\025\020\035\022\027\024\037\027\042\031\024\047\040" +
    "\050\034\052\026\053\030\054\031\001\002\000\004\050" +
    "\103\001\002\000\036\007\032\012\033\013\041\017\025" +
    "\020\035\022\027\024\037\027\042\031\024\047\040\050" +
    "\034\052\026\053\030\054\031\001\002\000\026\030\053" +
    "\035\046\036\044\037\045\040\052\041\047\042\055\043" +
    "\050\045\051\046\054\001\002\000\036\007\032\012\033" +
    "\013\041\017\025\020\035\022\027\024\037\027\042\031" +
    "\024\047\040\050\034\052\026\053\030\054\031\001\002" +
    "\000\036\007\032\012\033\013\041\017\025\020\035\022" +
    "\027\024\037\027\042\031\024\047\040\050\034\052\026" +
    "\053\030\054\031\001\002\000\036\007\032\012\033\013" +
    "\041\017\025\020\035\022\027\024\037\027\042\031\024" +
    "\047\040\050\034\052\026\053\030\054\031\001\002\000" +
    "\036\007\032\012\033\013\041\017\025\020\035\022\027" +
    "\024\037\027\042\031\024\047\040\050\034\052\026\053" +
    "\030\054\031\001\002\000\036\007\032\012\033\013\041" +
    "\017\025\020\035\022\027\024\037\027\042\031\024\047" +
    "\040\050\034\052\026\053\030\054\031\001\002\000\004" +
    "\050\073\001\002\000\036\007\032\012\033\013\041\017" +
    "\025\020\035\022\027\024\037\027\042\031\024\047\040" +
    "\050\034\052\026\053\030\054\031\001\002\000\052\005" +
    "\uffd2\006\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2\023\uffd2" +
    "\030\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\001\002\000\004\051\057\001\002\000\036\007\032\012" +
    "\033\013\041\017\025\020\035\022\027\024\037\027\042" +
    "\031\024\047\040\050\034\052\026\053\030\054\031\001" +
    "\002\000\044\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\023\uffd6\030\uffd6\032\uffd6\034\uffd6\035\046\036" +
    "\044\037\045\040\052\044\uffd6\045\051\046\054\001\002" +
    "\000\004\045\060\001\002\000\004\050\061\001\002\000" +
    "\004\027\062\001\002\000\040\007\032\012\033\013\041" +
    "\017\025\020\035\022\027\024\037\027\042\030\065\031" +
    "\024\047\040\050\034\052\026\053\030\054\031\001\002" +
    "\000\052\005\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\023\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\001\002\000\006\030\070\044\067\001\002" +
    "\000\052\005\uffea\006\uffea\010\uffea\014\uffea\015\uffea\016" +
    "\uffea\023\uffea\030\uffea\032\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\001\002\000\030\030\uffe8\035\046\036\044" +
    "\037\045\040\052\041\047\042\055\043\050\044\uffe8\045" +
    "\051\046\054\001\002\000\036\007\032\012\033\013\041" +
    "\017\025\020\035\022\027\024\037\027\042\031\024\047" +
    "\040\050\034\052\026\053\030\054\031\001\002\000\052" +
    "\005\uffe9\006\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9\023" +
    "\uffe9\030\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\001\002\000\030\030\uffe7\035\046\036\044\037\045" +
    "\040\052\041\047\042\055\043\050\044\uffe7\045\051\046" +
    "\054\001\002\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\023\uffd8\030\uffd8\032\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\051\046\054\001\002\000\004\027\062\001" +
    "\002\000\052\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\023\uffe2\030\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\001\002\000\044\005\uffd5\006\uffd5\010" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\023\uffd5\030\uffd5\032\uffd5" +
    "\034\uffd5\035\046\036\044\037\045\040\052\044\uffd5\045" +
    "\051\046\054\001\002\000\044\005\uffd4\006\uffd4\010\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\023\uffd4\030\uffd4\032\uffd4\034" +
    "\uffd4\035\046\036\044\037\045\040\052\044\uffd4\045\051" +
    "\046\054\001\002\000\052\005\uffdb\006\uffdb\010\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\023\uffdb\030\uffdb\032\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\045\040\052\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\051\046\054\001\002\000\052\005\uffd9" +
    "\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\023\uffd9\030" +
    "\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\051\046\054\001" +
    "\002\000\052\005\uffda\006\uffda\010\uffda\014\uffda\015\uffda" +
    "\016\uffda\023\uffda\030\uffda\032\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\045\040\052\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\051\046\054\001\002\000\052\005\uffcd\006\uffcd\010" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\023\uffcd\030\uffcd\032\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\004" +
    "\033\104\001\002\000\004\051\105\001\002\000\010\010" +
    "\uffca\025\106\044\uffca\001\002\000\036\007\032\012\033" +
    "\013\041\017\025\020\035\022\027\024\037\027\042\031" +
    "\024\047\040\050\034\052\026\053\030\054\031\001\002" +
    "\000\006\010\111\044\110\001\002\000\004\050\103\001" +
    "\002\000\036\007\032\012\033\013\041\017\025\020\035" +
    "\022\027\024\037\027\042\031\024\047\040\050\034\052" +
    "\026\053\030\054\031\001\002\000\052\005\uffcc\006\uffcc" +
    "\010\uffcc\014\uffcc\015\uffcc\016\uffcc\023\uffcc\030\uffcc\032" +
    "\uffcc\034\uffcc\035\046\036\044\037\045\040\052\041\047" +
    "\042\055\043\050\044\uffcc\045\051\046\054\001\002\000" +
    "\052\005\uffcb\006\uffcb\010\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\023\uffcb\030\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\001\002\000\030\010\uffc9\035\046\036\044\037" +
    "\045\040\052\041\047\042\055\043\050\044\uffc9\045\051" +
    "\046\054\001\002\000\052\005\uffd7\006\uffd7\010\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\023\uffd7\030\uffd7\032\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\051\046\054\001\002\000\052\005\uffd3" +
    "\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\023\uffd3\030" +
    "\uffd3\032\uffd3\034\uffd3\035\046\036\044\037\045\040\052" +
    "\041\047\042\055\043\050\044\uffd3\045\051\046\054\001" +
    "\002\000\006\032\ufff8\050\ufff8\001\002\000\026\023\121" +
    "\035\046\036\044\037\045\040\052\041\047\042\055\043" +
    "\050\045\051\046\054\001\002\000\004\050\123\001\002" +
    "\000\006\021\ufff1\050\ufff1\001\002\000\004\033\127\001" +
    "\002\000\006\021\126\050\123\001\002\000\006\021\ufff0" +
    "\050\ufff0\001\002\000\052\005\uffdc\006\uffdc\010\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\023\uffdc\030\uffdc\032\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000\004\051\130" +
    "\001\002\000\004\026\131\001\002\000\036\007\032\012" +
    "\033\013\041\017\025\020\035\022\027\024\037\027\042" +
    "\031\024\047\040\050\034\052\026\053\030\054\031\001" +
    "\002\000\026\034\133\035\046\036\044\037\045\040\052" +
    "\041\047\042\055\043\050\045\051\046\054\001\002\000" +
    "\006\021\uffef\050\uffef\001\002\000\004\051\140\001\002" +
    "\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\023\uffe4\030\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\001\002\000\036\007\032\012\033\013\041" +
    "\017\025\020\035\022\027\024\037\027\042\031\024\047" +
    "\040\050\034\052\026\053\030\054\031\001\002\000\052" +
    "\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6\016\uffe6\023" +
    "\uffe6\030\uffe6\032\uffe6\034\uffe6\035\046\036\044\037\045" +
    "\040\052\041\047\042\055\043\050\044\uffe6\045\051\046" +
    "\054\001\002\000\004\025\141\001\002\000\036\007\032" +
    "\012\033\013\041\017\025\020\035\022\027\024\037\027" +
    "\042\031\024\047\040\050\034\052\026\053\030\054\031" +
    "\001\002\000\052\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\023\uffe5\030\uffe5\032\uffe5\034\uffe5\035\046" +
    "\036\044\037\045\040\052\041\047\042\055\043\050\044" +
    "\uffe5\045\051\046\054\001\002\000\052\005\uffdd\006\uffdd" +
    "\010\uffdd\014\uffdd\015\uffdd\016\uffdd\023\uffdd\030\uffdd\032" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\051\046\054\001\002\000" +
    "\026\016\145\035\046\036\044\037\045\040\052\041\047" +
    "\042\055\043\050\045\051\046\054\001\002\000\036\007" +
    "\032\012\033\013\041\017\025\020\035\022\027\024\037" +
    "\027\042\031\024\047\040\050\034\052\026\053\030\054" +
    "\031\001\002\000\026\005\147\035\046\036\044\037\045" +
    "\040\052\041\047\042\055\043\050\045\051\046\054\001" +
    "\002\000\036\007\032\012\033\013\041\017\025\020\035" +
    "\022\027\024\037\027\042\031\024\047\040\050\034\052" +
    "\026\053\030\054\031\001\002\000\026\006\151\035\046" +
    "\036\044\037\045\040\052\041\047\042\055\043\050\045" +
    "\051\046\054\001\002\000\052\005\uffe1\006\uffe1\010\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\023\uffe1\030\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\052\005" +
    "\uffde\006\uffde\010\uffde\014\uffde\015\uffde\016\uffde\023\uffde" +
    "\030\uffde\032\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\001\002\000\026\014\154\035\046\036\044\037\045\040" +
    "\052\041\047\042\055\043\050\045\051\046\054\001\002" +
    "\000\036\007\032\012\033\013\041\017\025\020\035\022" +
    "\027\024\037\027\042\031\024\047\040\050\034\052\026" +
    "\053\030\054\031\001\002\000\026\015\156\035\046\036" +
    "\044\037\045\040\052\041\047\042\055\043\050\045\051" +
    "\046\054\001\002\000\052\005\uffe0\006\uffe0\010\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\023\uffe0\030\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\001\002\000\004\032\164" +
    "\001\002\000\006\032\uffed\034\162\001\002\000\030\032" +
    "\uffec\034\uffec\035\046\036\044\037\045\040\052\041\047" +
    "\042\055\043\050\045\051\046\054\001\002\000\036\007" +
    "\032\012\033\013\041\017\025\020\035\022\027\024\037" +
    "\027\042\031\024\047\040\050\034\052\026\053\030\054" +
    "\031\001\002\000\030\032\uffeb\034\uffeb\035\046\036\044" +
    "\037\045\040\052\041\047\042\055\043\050\045\051\046" +
    "\054\001\002\000\052\005\uffdf\006\uffdf\010\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\023\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\001\002\000\004\034\166\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\032\ufffb" +
    "\001\002\000\004\032\171\001\002\000\004\034\172\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\002\004\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\172\004\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\167\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\015\006\014\001\001\000\006\005\166\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\035\001\001\000\010\007\160\020\156\021\157\001\001" +
    "\000\004\007\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\143" +
    "\001\001\000\004\007\142\001\001\000\004\022\134\001" +
    "\001\000\004\007\117\001\001\000\002\001\001\000\004" +
    "\007\115\001\001\000\004\007\114\001\001\000\004\016" +
    "\101\001\001\000\004\007\042\001\001\000\002\001\001" +
    "\000\004\007\100\001\001\000\004\007\077\001\001\000" +
    "\004\007\076\001\001\000\004\007\075\001\001\000\004" +
    "\007\074\001\001\000\002\001\001\000\004\007\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\062\001\001\000\006\007\065\023\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\106\001\001\000\004\007\113\001\001\000" +
    "\002\001\001\000\004\016\112\001\001\000\004\007\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\123\015\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\145\001\001\000\002" +
    "\001\001\000\004\007\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.getLineNumber();
        System.out.print("line " + lineno + ": parse error at or near ");
        Utilities.printToken(cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    	//TODO
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



	int getLineNumber() {
		return ((Lexer) parser.getScanner()).getLineNumber();
	}
	
	AbstractSymbol getFilename() {
		return ((Lexer) parser.getScanner()).getFilename();
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // let_args ::= ASSIGN expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_args",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // let_args ::= 
            {
              Expression RESULT =null;
		 RESULT = new no_expr(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_args",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // let_expr ::= OBJECTID COLON TYPEID let_args COMMA let_expr 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression args = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		let le = (let)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new let(getLineNumber(), name, type, args, le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // let_expr ::= OBJECTID COLON TYPEID let_args IN expr 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression args = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new let(getLineNumber(), name, type, args, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LET let_expr 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		let le = (let)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new bool_const(getLineNumber(), bool); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractSymbol string = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new string_const(getLineNumber(), string); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractSymbol integer = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new int_const(getLineNumber(), integer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new object(getLineNumber(), name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new comp(getLineNumber(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new eq(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new leq(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new lt(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new neg(getLineNumber(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new divide(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new mul(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new minus(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new plus(getLineNumber(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cases list = (Cases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new typcase(getLineNumber(), e, list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new isvoid(getLineNumber(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractSymbol typeName = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new new_(getLineNumber(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LBRACE expr_list RBRACE 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressions list = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new block(getLineNumber(), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		int eWhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eWhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression eWhile = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eLoopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eLoopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression eLoop = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new loop(getLineNumber(), eWhile, eLoop); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int eIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression eIf = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression eThen = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression eElse = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new cond(getLineNumber(), eIf, eThen, eElse); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DOT OBJECTID dispatch_args 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new dispatch(getLineNumber(), e, name, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr AT TYPEID DOT OBJECTID dispatch_args 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new static_dispatch(getLineNumber(), e, type, name, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= OBJECTID dispatch_args 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new dispatch(getLineNumber(), new object(getLineNumber(), AbstractTable.idtable.addString("self")), name, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= OBJECTID COLON TYPEID ASSIGN expr 
            {
              Expression RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractSymbol variableName = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractSymbol variableType = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign(getLineNumber(), variableName, e) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractSymbol variableName = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign(getLineNumber(), variableName, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dispatch_args_2 ::= dispatch_args_2 COMMA expr 
            {
              Expressions RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = args.appendElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dispatch_args_2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dispatch_args_2 ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressions(getLineNumber()).appendElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dispatch_args_2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dispatch_args ::= LPAREN dispatch_args_2 RPAREN 
            {
              Expressions RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dispatch_args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dispatch_args ::= LPAREN RPAREN 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dispatch_args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr_list_2 ::= expr_list_2 SEMI expr 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el.appendElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_list_2 ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressions(getLineNumber()).appendElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_list ::= expr_list_2 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_list ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Case RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AbstractSymbol variableName = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol variableType = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new branch(getLineNumber(), variableName, variableType, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // case_list ::= case_list case 
            {
              Cases RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // case_list ::= case 
            {
              Cases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cases(getLineNumber()).appendElement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal ::= OBJECTID COLON TYPEID 
            {
              formal RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractSymbol variableName = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractSymbol variableType = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new formal(getLineNumber(), variableName, variableType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list_2 ::= formal_list_2 COMMA formal 
            {
              Formals RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formal f = (formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  fl.appendElement(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list_2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list_2 ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formal f = (formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formals(getLineNumber()).appendElement(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list_2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_list ::= formal_list_2 
            {
              Formals RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assign ::= OBJECTID ASSIGN expr SEMI 
            {
              assign RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new assign(getLineNumber(), o, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new attr(getLineNumber(), o, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new attr(getLineNumber(), o, t, new no_expr(getLineNumber())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= feature feature_list 
            {
              Features RESULT =null;
		 RESULT = new Features(getLineNumber()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new class_(getLineNumber(), n, p, f, getFilename()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new class_(getLineNumber(), n, AbstractTable.idtable.addString("Object"), f, getFilename()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class class_list 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Classes(getLineNumber())).appendElement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		program start_val = (program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new program(getLineNumber(), cl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

